# Azure DevOps Pipeline for BYOD Synthetic Data Generation Service
# This pipeline builds and deploys the application to Azure Container Registry and Azure App Service

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - README.md
      - docs/*
      - '*.md'

pr:
  branches:
    include:
      - main
      - develop

variables:
  # Azure Container Registry
  azureSubscription: 'Azure-Service-Connection' # Replace with your service connection name
  azureContainerRegistry: 'byodregistry.azurecr.io' # Replace with your ACR name
  containerRegistryName: 'byodregistry' # Replace with your ACR name (without .azurecr.io)
  imageName: 'byod-synthetic-data-service'

  # Azure App Service
  webAppName: 'byod-synthetic-data-service' # Replace with your App Service name
  resourceGroupName: 'byod-rg' # Replace with your resource group name

  # Build configuration
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildNumber)'

  # Python version for testing
  pythonVersion: '3.9'

stages:
  - stage: Build
    displayName: 'Build and Test'
    jobs:
      - job: BuildAndTest
        displayName: 'Build Docker Image and Run Tests'
        pool:
          vmImage: 'ubuntu-latest'

        steps:
        # Checkout code
        - checkout: self
          fetchDepth: 1

        # Setup Python for testing
        - task: UsePythonVersion@0
          displayName: 'Use Python $(pythonVersion)'
          inputs:
            versionSpec: '$(pythonVersion)'
            addToPath: true

        # Install dependencies for testing
        - script: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install pytest pytest-cov
          displayName: 'Install dependencies'

        # Run unit tests (when available)
        - script: |
            # Run tests when test directory exists
            if [ -d "tests" ]; then
              python -m pytest tests/ --junitxml=junit/test-results.xml --cov=src --cov-report=xml --cov-report=html
            else
              echo "No tests directory found, skipping tests"
            fi
          displayName: 'Run unit tests'
          continueOnError: true

        # Publish test results
        - task: PublishTestResults@2
          displayName: 'Publish test results'
          inputs:
            testResultsFiles: '**/test-*.xml'
            testRunTitle: 'Python $(pythonVersion)'
          condition: succeededOrFailed()

        # Build Docker image
        - task: Docker@2
          displayName: 'Build Docker image'
          inputs:
            containerRegistry: '$(azureSubscription)'
            repository: '$(imageName)'
            command: 'build'
            Dockerfile: '$(dockerfilePath)'
            tags: |
              $(tag)
              latest

        # Push Docker image to ACR (only on main branch)
        - task: Docker@2
          displayName: 'Push Docker image to ACR'
          condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
          inputs:
            containerRegistry: '$(azureSubscription)'
            repository: '$(imageName)'
            command: 'push'
            tags: |
              $(tag)
              latest

  - stage: DeployDev
    displayName: 'Deploy to Development'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - deployment: DeployToDev
        displayName: 'Deploy to Dev Environment'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'development'
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzureWebAppContainer@1
                displayName: 'Deploy to Dev App Service'
                inputs:
                  azureSubscription: '$(azureSubscription)'
                  appName: '$(webAppName)-dev'
                  containers: '$(azureContainerRegistry)/$(imageName):$(tag)'

  - stage: DeployProd
    displayName: 'Deploy to Production'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployToProd
        displayName: 'Deploy to Production Environment'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzureWebAppContainer@1
                displayName: 'Deploy to Production App Service'
                inputs:
                  azureSubscription: '$(azureSubscription)'
                  appName: '$(webAppName)'
                  containers: '$(azureContainerRegistry)/$(imageName):$(tag)'

              # Health check after deployment
              - task: PowerShell@2
                displayName: 'Health Check'
                inputs:
                  targetType: 'inline'
                  script: |
                    $url = "https://$(webAppName).azurewebsites.net/health"
                    $maxRetries = 5
                    $retryDelay = 30

                    for ($i = 1; $i -le $maxRetries; $i++) {
                      try {
                        $response = Invoke-WebRequest -Uri $url -UseBasicParsing
                        if ($response.StatusCode -eq 200) {
                          Write-Host "Health check passed"
                          exit 0
                        }
                      }
                      catch {
                        Write-Host "Health check attempt $i failed. Retrying in $retryDelay seconds..."
                        if ($i -lt $maxRetries) {
                          Start-Sleep -Seconds $retryDelay
                        }
                      }
                    }

                    Write-Error "Health check failed after $maxRetries attempts"
                    exit 1